model Divertimento

class Parque
end

class Empresa
end

class Noria < Atraccion
        operations
            mantenimiento() begin 
                if self.vehiculo->select(v : Vehiculo | v.estaAveriado = true)->size() > 0 then self.averiado() else self.arreglado() end
            end
end

class MRusa < Atraccion
        operations
            mantenimiento() begin 
                if self.vagon->select(v : Vagon | v.estaAveriado = true)->size() > 0 then self.averiado() else self.arreglado() end
            end
end

abstract class Atraccion
        attributes
                calle : String
                averia : Boolean init: false
                enFuncionamiento : Boolean init: false
        operations

            arreglado() begin
                self.averia := false;
            end

            averiado() begin
                self.averia := true;
            end

            funcionamiento() begin
                self.enFuncionamiento := true;
            end

            mantenimiento() begin
                if self.oclIsTypeOf(Noria) then
                    for ve in self.oclAsType(Noria).vehiculo
                        do ve.comprobarAveria(self, self.parque.cra);
                    end;
                end;

                if self.oclIsTypeOf(MRusa) then
                    for va in self.oclAsType(MRusa).vagon
                        do va.comprobarAveria(self, self.parque.cra);
                    end;
                end;
            end

            parada() begin
                self.enFuncionamiento := false;
                self.mantenimiento()
                
            end
        statemachines
            psm FuncionamientoAtraccion
                states
                    inicio:initial
                    noEnFuncionamiento[enFuncionamiento = false]
                    enFuncionamiento[enFuncionamiento = true]
                transitions
                    inicio -> noEnFuncionamiento { create }

                    noEnFuncionamiento -> enFuncionamiento { funcionamiento() }

                    enFuncionamiento -> noEnFuncionamiento { parada() }
            end
            psm AveriaAtraccion
                states
                    inicio:initial
                    noAveriado[averia = false]
                    averiado[averia = true]
                transitions
                    inicio -> noAveriado { create }

                    noAveriado -> averiado { mantenimiento() }

                    averiado -> noAveriado { mantenimiento() }
            end
end

abstract class ComponenteAtraccion
        attributes
                numero : Integer
                estaAveriado : Boolean init: false
                estaInformado : Boolean init: false
        operations
            comprobarAveria(a:Atraccion, cra:CRA) begin
                if self.estaAveriado then
                    self.informarAveria(a, cra);
                end;
            end



            informarAveria(a:Atraccion, cra:CRA) begin
                insert(cra,self) into CRAComponente;
                a.averiado();
                --cra.buscarOperario(self);
            end
            pre noInformadoAnteriormente: self.cra->size() = 0
            pre estaAveriado: self.estaAveriado = true
            post craInformada: self.cra->size() = self.cra@pre->size() + 1
            post atraccionInformada: a.averia = true

            averiar() begin
                self.estaAveriado := true;
                if self.oclIsTypeOf(Vehiculo) then self.oclAsType(Vehiculo).informarAveria(self.oclAsType(Vehiculo).noria, self.oclAsType(Vehiculo).noria.parque.cra -> asOrderedSet() -> first()) end;
                if self.oclIsTypeOf(Vagon) then self.oclAsType(Vagon).informarAveria(self.oclAsType(Vagon).mrusa, self.oclAsType(Vagon).mrusa.parque.cra -> asOrderedSet() -> first()) end;
            end
            pre noAveriadoAntes: self.estaAveriado = false
            post averiadoDespues: self.estaAveriado = true

            reparado() begin
                self.estaAveriado := false;
                self.estaInformado := false;
            end
            pre averiadoAntes: self.estaAveriado = true
            post noAveriadoDespues: self.estaAveriado = false
            post noInformadoDespues: self.estaInformado = false

            esInformado() begin
                self.estaInformado := true;
            end
            pre noInformadoAntes: self.estaInformado = false
            post informadoDespues: self.estaInformado = true
end

class Vehiculo < ComponenteAtraccion
end

class Vagon < ComponenteAtraccion
end

class Dispositivo
        attributes
                averiasResueltas : Integer
                init : 0
end

class CRA
    operations
        buscarOperario(c : ComponenteAtraccion) begin
            declare o : Operario;
            o := self.dispositivo.operario -> select(o : Operario | o.estaLibre = true) -> asOrderedSet() -> first();
            if(o <> Undefined) then
                insert(c, o.dispositivo) into AveriaDispositivo;
                o.ocupado();
                --o.repararAveria(c);
            else
                self.informar(c);
            end
        end
            pre componenteAveriado: c.estaAveriado = true
            pre craInformada: c.cra <> Undefined

        informar(c : ComponenteAtraccion) begin
            c.esInformado();
        end
end

class Operario
        attributes
            estaLibre : Boolean init: true
        operations
            repararAveria(c: ComponenteAtraccion)
            begin
                delete (c, self.dispositivo) from AveriaDispositivo;
                delete (c.cra, c) from CRAComponente;
                self.libre();
                self.dispositivo.averiasResueltas := self.dispositivo.averiasResueltas+1;
                c.reparado();
                if c.oclIsTypeOf(Vehiculo) then c.oclAsType(Vehiculo).noria.mantenimiento() end;
                if c.oclIsTypeOf(Vagon) then c.oclAsType(Vagon).mrusa.mantenimiento() end;
            end
            pre asignado: estaLibre = false
            pre averiado: c.estaAveriado = true
            pre componenteAsociado: self.dispositivo.averiado = c
            post libre: estaLibre = true
            post arreglado: c.estaAveriado = false
            post masResueltos: dispositivo.averiasResueltas = dispositivo.averiasResueltas@pre + 1
        
            libre() begin
                self.estaLibre := true;
            end
            pre ocupadoAntes: estaLibre = false
            post libreDespues: estaLibre = true

            ocupado() begin
                self.estaLibre := false;
            end
            pre libreAntes: estaLibre = true
            post ocupadoDespues: estaLibre = false

        statemachines
            psm EstadoOperario
                states
                    inicio:initial
                    libre [estaLibre = true]
                    ocupado [estaLibre = false]
                transitions
                    inicio -> libre { create }

                    libre -> ocupado { ocupado() }

                    ocupado -> libre { libre() }
            end
end

association Vagones between
    MRusa [1] role mrusa
    Vagon [*] role vagon
end

association Enganche between
    Noria [1] role noria
    Vehiculo [*] role vehiculo
end

association Parques between
    Empresa [1] role propietaria
    Parque [*] role parque
end

association Atracciones between
    Atraccion [*] role atraccion
    Parque [1] role parque
end

association DispositivoOperario between
    Dispositivo [1] role dispositivo
    Operario [0..1] role operario
end

association EnganchePosterior between
    Vagon [0..1] role enganchep
    Vagon [0..1] role enganchea
end

association CRAComponente between
    CRA [0..1] role cra
    ComponenteAtraccion [*] role componente
end

association CRADispositivo between
    CRA [1] role cra
    Dispositivo [*] role dispositivo
end

association CRAParque between
    CRA [1] role cra
    Parque [1] role parque
end

association AveriaDispositivo between
    ComponenteAtraccion [0..1] role averiado
    Dispositivo [0..1] role dispositivo
end

constraints
    context Dispositivo
        inv averiasResueltasMayorIgualZero: self.averiasResueltas >= 0
        inv averiasResueltasDistintoDeNull: self.averiasResueltas <> Undefined
    
    context ComponenteAtraccion
        inv numeroMayorZero: self.numero > 0

    context Vagon
        inv numeroVagonDistinto: Vagon.allInstances() -> isUnique(numero)

    context Vehiculo
        inv numeroVehiculoDistinto: Vehiculo.allInstances() -> isUnique(numero)