model Divertimento

class Parque
end

class Empresa
end

class Noria < Atraccion
        operations
            mantenimiento() begin 
                if self.vehiculo->select(v : Vehiculo | v.estaAveriado = true)->size() > 0 then self.averia := true else self.averia := false end
            end
end

class MRusa < Atraccion
        operations
            mantenimiento() begin 
                if self.vagon->select(v : Vagon | v.estaAveriado = true)->size() > 0 then self.averia := true else self.averia := false end
            end
end

abstract class Atraccion
        attributes
                calle : String
                averia : Boolean
end

abstract class ComponenteAtraccion
        attributes
                numero : Integer
                estaAveriado : Boolean
        operations
            informarAveria(a:Atraccion, cra:CRA) begin
                insert(cra,self) into CRAComponente;
                a.averia := true
            end
            pre noInformadoAnteriormente: self.cra->size() = 0
            pre estaAveriado: self.estaAveriado = true
            post craInformada: self.cra->size() = self.cra@pre->size() + 1
            post atraccionInformada: a.averia = true

            averiar() begin
                self.estaAveriado := true;
                if self.oclIsTypeOf(Vehiculo) then self.oclAsType(Vehiculo).informarAveria(self.oclAsType(Vehiculo).noria, self.oclAsType(Vehiculo).noria.parque.cra -> asOrderedSet() -> first()) end;
                if self.oclIsTypeOf(Vagon) then self.oclAsType(Vagon).informarAveria(self.oclAsType(Vagon).mrusa, self.oclAsType(Vagon).mrusa.parque.cra -> asOrderedSet() -> first()) end;
            end
            pre noAveriadoAntes: self.estaAveriado = false
            post averiadoDespues: self.estaAveriado = true

            reparado() begin
                self.estaAveriado := false;
            end
            pre averiadoAntes: self.estaAveriado = true
            post noAveriadoDespues: self.estaAveriado = false

        statemachines
            psm EstadoComponente
                states
                    inicio:initial
                    noAveriado [estaAveriado = false]
                    Averiado [estaAveriado = true]
                transitions
                    --Transicion de creacion
                    inicio -> noAveriado { create }

                    noAveriado -> Averiado { averiar() }

                    Averiado -> noAveriado { reparado() }
            end
end

class Vehiculo < ComponenteAtraccion
end

class Vagon < ComponenteAtraccion
end

class Dispositivo
        attributes
                averiasResueltas : Integer
                init : 0
end

class CRA
    operations
        buscarOperario(c : ComponenteAtraccion)
        begin
            if(self.dispositivo.operario -> select(o : Operario | o.estaLibre = true) -> size() > 0) then
                insert(c,self.dispositivo.operario -> select(o : Operario | o.estaLibre = true) -> asOrderedSet() -> first().dispositivo) into AveriaDispositivo;
                self.dispositivo.operario -> select(o : Operario | o.estaLibre = true) -> asOrderedSet() -> first().estaLibre := false;
            end
            end
            pre componenteAveriado: c.estaAveriado = true
            pre craInformada: c.cra <> Undefined
end

class Operario
        attributes
            estaLibre : Boolean
        operations
            repararAveria(c: ComponenteAtraccion)
            begin
                delete (c, self.dispositivo) from AveriaDispositivo;
                delete (c.cra, c) from CRAComponente;
                self.estaLibre := true;
                self.dispositivo.averiasResueltas := self.dispositivo.averiasResueltas+1;
                c.reparado();
                if c.oclIsTypeOf(Vehiculo) then c.oclAsType(Vehiculo).noria.mantenimiento() end;
                if c.oclIsTypeOf(Vagon) then c.oclAsType(Vagon).mrusa.mantenimiento() end;
            end
            pre asignado: estaLibre = false
            pre averiado: c.estaAveriado = true
            pre componenteAsociado: self.dispositivo.averiado = c
            post libre: estaLibre = true
            post arreglado: c.estaAveriado = false
            post masResueltos: dispositivo.averiasResueltas = dispositivo.averiasResueltas@pre + 1
end

association Vagones between
    MRusa [1] role mrusa
    Vagon [*] role vagon
end

association Enganche between
    Noria [1] role noria
    Vehiculo [*] role vehiculo
end

association Parques between
    Empresa [1] role propietaria
    Parque [*] role parque
end

association Atracciones between
    Atraccion [*] role atraccion
    Parque [*] role parque
end

association DispositivoOperario between
    Dispositivo [1] role dispositivo
    Operario [0..1] role operario
end

association EnganchePosterior between
    Vagon [0..1] role enganchep
    Vagon [0..1] role enganchea
end

association CRAComponente between
    CRA [0..1] role cra
    ComponenteAtraccion [*] role componente
end

association CRADispositivo between
    CRA [1] role cra
    Dispositivo [*] role dispositivo
end

association CRAParque between
    CRA [1] role cra
    Parque [1] role parque
end

association AveriaDispositivo between
    ComponenteAtraccion [0..1] role averiado
    Dispositivo [0..1] role dispositivo
end

constraints
    context Dispositivo
        inv averiasResueltasMayorIgualZero: self.averiasResueltas >= 0
        inv averiasResueltasDistintoDeNull: self.averiasResueltas <> Undefined
    
    context ComponenteAtraccion
        inv numeroMayorZero: self.numero > 0

    context Vagon
        inv numeroVagonDistinto: Vagon.allInstances() -> isUnique(numero)

    context Vehiculo
        inv numeroVehiculoDistinto: Vehiculo.allInstances() -> isUnique(numero)