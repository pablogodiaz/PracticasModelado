model Divertimento

class Clock
attributes
    NOW : Integer
operations
    tick()
        begin
            self.NOW := self.NOW + 1;
        end
        post checkTick: self.NOW@pre + 1 = self.NOW;

    run(n : Integer)
        begin
            for i in Sequence{1..n}
                do self.tick();
            end
        end
        pre enteroPositivo: n <> null and n > 0
        post comprobar: self.NOW@pre + n = self.NOW
end

class Parque
end

class Divertimento
end

class Noria < Atraccion
end

class MRusa < Atraccion
end

abstract class Atraccion
        attributes
                calle : String
                averia : Boolean
end

abstract class ComponenteAtraccion
        attributes
                numero : Integer
                estaAveriado : Boolean
        operations
            informarAveria(a:Atraccion, cra:CRA) begin
                insert(cra,self) into CRAComponente;
                a.averia := true
            end
            pre noInformadoAnteriormente: self.cra->size() = 0
            post craInformada: self.cra@pre->size() = self.cra->size() + 1
            post atraccionInformada: a.averia = true
end

class Vehiculo < ComponenteAtraccion
end

class Vagon < ComponenteAtraccion
end

class Dispositivo
        attributes
                averiasResueltas : Integer
end

class CRA
    operations
        buscarOperario(c : ComponenteAtraccion)
        begin
            if(self.dispositivo.operario -> select(o : Operario | o.estaLibre = true) -> size() > 0) then
                self.dispositivo.operario -> select(o : Operario | o.estaLibre = true) -> asOrderedSet() -> first().repararAveria(c)
            end
        end
end

class Operario
        attributes
            estaLibre : Boolean
        operations
            repararAveria(componente: ComponenteAtraccion)
            begin
                delete (self.dispositivo.averiado, self.dispositivo) from AveriaDispositivo;
                self.estaLibre := true;
                self.dispositivo.averiasResueltas := self.dispositivo.averiasResueltas+1;
            end
            pre asignado:      estaLibre = false
            post libre:        estaLibre = true
            post masResueltos:  dispositivo.averiasResueltas = dispositivo.averiasResueltas@pre + 1
end

association Vagones between
    MRusa [1] role mrusa
    Vagon [*] role vagon
end

association Enganche between
    Noria [1] role noria
    Vehiculo [*] role vehiculo
end

association Parques between
    Divertimento [1] role propietaria
    Parque [*] role parque
end

association Atracciones between
    Atraccion [*] role atraccion
    Parque [*] role parque
end

association DispositivoOperario between
    Dispositivo [1] role dispositivo
    Operario [0..1] role operario
end

association EnganchePosterior between
    Vagon [0..1] role enganchep
    Vagon [0..1] role enganchea
end

association CRAComponente between
    CRA [*] role cra
    ComponenteAtraccion [*] role componente
end

association CRADispositivo between
    CRA [1] role cra
    Dispositivo [*] role dispositivo
end

association CRAParque between
    CRA [1] role cra
    Parque [1] role parque
end

association AveriaDispositivo between
    ComponenteAtraccion [0..1] role averiado
    Dispositivo [0..1] role dispositivo
end

constraints
    context Dispositivo
        inv averiasResueltasMayorIgualZero: self.averiasResueltas >= 0
    
    context ComponenteAtraccion
        inv numeroMayorZero: self.numero > 0

    context MRusa
        inv numeroVagonMenorSize: self.vagon -> select(v : Vagon | v.numero < self.vagon -> size()) -> size() = self.vagon -> size()