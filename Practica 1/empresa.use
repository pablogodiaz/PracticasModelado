model Empresa

class Empresa
    attributes
        valorminimo : Real
end

class Almacen
end

class Persona
end

class Director
end

class Gerente
end

class Trabajador
end

class Contrato
    attributes
        salario : Integer
end

class Producto
end

class Ejemplar
end

associationclass Venta between
    Empresa[*] role vendedor
    Producto[*] role producto
    attributes
        precio : Real
end

class Cliente
    attributes
        esVip : Boolean
end


class Pedido
    attributes
        precioTotal:Real derive: self.ejemplar.producto.venta->select(v:Venta | v.vendedor = self.empresa).precio->sum()
        precioDescuento: Real derive: if self.cliente.esVip then precioTotal*0.9 else precioTotal endif

end

association ContratoEmpresa between
    Contrato [3..*] role contrato
    Empresa [1] role empresa
end
    
association DirectorContrato between
    Director [0..1] role director
    Contrato [0..1] role puesto
end

association GerenteContrato between
    Gerente [0..1] role gerente
    Contrato [0..1] role puesto
end

association TrabajadorContrato between
    Trabajador [0..1] role trabajador
    Contrato [0..1] role puesto
end

association DirectorEmpleado between
    Director [0..3] role director
    Persona [1] role empleado
end

association GerenteEmpleado between
    Gerente [0..3] role gerente
    Persona [1] role empleado
end

association TrabajadorEmpleado between
    Trabajador [0..3] role trabajador
    Persona [1] role empleado
end

association ClientePersona between
    Cliente [*] role cliente
    Persona [1] role persona
end

association PedidoEmpresa between
    Pedido [*] role pedido
    Empresa [1] role empresa
end

association ClientePedido between
    Cliente [1] role cliente
    Pedido [*] role pedido
end

association Compra between
    Pedido[0..1] role pedido
    Ejemplar[1..*] role ejemplar
end

association MaterializacionProducto between
    Producto[1] role producto
    Ejemplar[*] role ejemplar
end

association EmpresaAlmacen between
    Empresa[1] role empresa
    Almacen[1] role almacen
end

association Almacenamiento between
    Almacen[0..1] role almacen
    Ejemplar[*] role ejemplar
end

constraints

context Empresa
    inv SueldoDirectorMayorGerente: self.contrato -> select(c : Contrato | c.director -> notEmpty()) -> any(true).salario > self.contrato -> select(c : Contrato | c.gerente -> notEmpty()) -> any(true).salario
    inv SueldoGerenteMayorTrabajador: self.contrato -> select(c : Contrato | c.gerente -> notEmpty()) -> any(true).salario > self.contrato -> asOrderedSet() -> sortedBy(salario) -> select(c : Contrato | c.trabajador -> notEmpty()) -> last().salario
    inv SoloUnRol: self.contrato.trabajador->select(t : Trabajador | t <> null).empleado -> intersection(self.contrato.director->select(d : Director | d <> null).empleado) -> intersection(self.contrato.gerente->select(g : Gerente | g <> null).empleado) -> excluding(null) -> size() = 0

context Persona
    inv TresTrabajosMaximo: self.trabajador->union(self.gerente)->union(self.director)->size() <= 3
    inv DiezProductosDistintosMaximo: self.cliente.pedido.ejemplar.producto->asSet()->size()<=10
    


context Pedido
    inv PrecioMayorQueMinimo: self.precioTotal >= self.empresa.valorminimo


context Contrato
    inv SoloUnEmpleado: Set{self.trabajador} -> union(Set{self.gerente}) -> union(Set{self.director})->excluding(null) -> size() = 1

context Cliente
    inv esVip: if (self.pedido.precioTotal->sum() > 1000)
        or (self.persona.trabajador->notEmpty()) or (self.persona.gerente->notEmpty()) or (self.persona.director->notEmpty()) then
        self.esVip = true else self.esVip = false endif
    inv clienteUnicoPorEmpresa: self.pedido.empresa->asSet()->size()<=1

context Ejemplar
    inv EjemplarAlmacenadoOComprado: self.almacen->size() + self.pedido->size() = 1